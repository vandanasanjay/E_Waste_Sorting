{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <div>Teachable Machine Image Model</div>\
<button type="button" onclick="init()">Start</button>\
<div id="webcam-container"></div>\
<div id="label-container"></div>\
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>\
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>\
<script type="text/javascript">\
    // More API functions here:\
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image\
\
    // the link to your model provided by Teachable Machine export panel\
    const URL = "./my_model/";\
\
    let model, webcam, labelContainer, maxPredictions;\
\
    // Load the image model and setup the webcam\
    async function init() \{\
        const modelURL = URL + "model.json";\
        const metadataURL = URL + "metadata.json";\
\
        // load the model and metadata\
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker\
        // or files from your local hard drive\
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)\
        model = await tmImage.load(modelURL, metadataURL);\
        maxPredictions = model.getTotalClasses();\
\
        // Convenience function to setup a webcam\
        const flip = true; // whether to flip the webcam\
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip\
        await webcam.setup(); // request access to the webcam\
        await webcam.play();\
        window.requestAnimationFrame(loop);\
\
        // append elements to the DOM\
        document.getElementById("webcam-container").appendChild(webcam.canvas);\
        labelContainer = document.getElementById("label-container");\
        for (let i = 0; i < maxPredictions; i++) \{ // and class labels\
            labelContainer.appendChild(document.createElement("div"));\
        \}\
    \}\
\
    async function loop() \{\
        webcam.update(); // update the webcam frame\
        await predict();\
        window.requestAnimationFrame(loop);\
    \}\
\
    // run the webcam image through the image model\
    async function predict() \{\
        // predict can take in an image, video or canvas html element\
        const prediction = await model.predict(webcam.canvas);\
        for (let i = 0; i < maxPredictions; i++) \{\
            const classPrediction =\
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);\
            labelContainer.childNodes[i].innerHTML = classPrediction;\
        \}\
    \}\
</script>\
}